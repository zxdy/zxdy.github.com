<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ZxDy]]></title>
  <link href="http://zxdy.github.com/atom.xml" rel="self"/>
  <link href="http://zxdy.github.com/"/>
  <updated>2012-08-30T00:16:42+08:00</updated>
  <id>http://zxdy.github.com/</id>
  <author>
    <name><![CDATA[zxdy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[eclipse hotkey]]></title>
    <link href="http://zxdy.github.com/blog/2012/08/28/eclipse-hotkey/"/>
    <updated>2012-08-28T21:05:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/08/28/eclipse-hotkey</id>
    <content type="html"><![CDATA[<h2>编辑</h2>

<ol>
<li>【ALT+/】
此快捷键为用户编辑的好帮手，能为用户提供内容的辅助，不要为记不全方法和属性名称犯愁，当记不全类、方法和属性的名字时，多体验一下【ALT+/】快捷键带来的好处吧。</li>
<li>【Ctrl+O】
显示类中方法和属性的大纲，能快速定位类的方法和属性，在查找Bug时非常有用。</li>
<li>【Ctrl+/】
快速添加注释，能为光标所在行或所选定行快速添加注释或取消注释，在调试的时候可能总会需要注释一些东西或取消注释，现在好了，不需要每行进行重复的注释。</li>
<li>【Ctrl+D】
删除当前行。</li>
<li>【Ctrl+M】
窗口最大化和还原。</li>
<li>【ctrl+E】
 快速转换编辑器。</li>
<li>【ctrl+】&amp;【ctrl+1】
 下一个错误及快速修改</li>
</ol>


<h2>定位 </h2>

<ol>
<li>【Ctrl+K】、【Ctrl++Shift+K】
快速向下和向上查找选定的内容，从此不再需要用鼠标单击查找对话框了。</li>
<li>【Ctrl+Shift+T】
查找工作空间（Workspace）构建路径中的可找到Java类文件，不要为找不到类而痛苦，而且可以使用“*”、“？”等通配符。</li>
<li>【Ctrl+Shift+R】
和【Ctrl+Shift+T】对应，查找工作空间（Workspace）中的所有文件（包括Java文件），也可以使用通配符。</li>
<li>【Ctrl+Shift+G】
查找类、方法和属性的引用。这是一个非常实用的快捷键，例如要修改引用某个方法的代码，可以通过【Ctrl+Shift+G】快捷键迅速定位所有引用此方法的位置。</li>
<li>【Ctrl+Shift+O】
快速生成import，当从网上拷贝一段程序后，不知道如何import进所调用的类，试试【Ctrl+Shift+O】快捷键，一定会有惊喜。</li>
<li>【Ctrl+Shift+F】
格式化代码，书写格式规范的代码是每一个程序员的必修之课，当看见某段代码极不顺眼时，选定后按【Ctrl+Shift+F】快捷键可以格式化这段代码，如果不选定代码则默认格式化当前文件（Java文件）。</li>
<li>【ALT+Shift+W】
查找当前文件所在项目中的路径，可以快速定位浏览器视图的位置，如果想查找某个文件所在的包时，此快捷键非常有用（特别在比较大的项目中,超实用）。</li>
<li>【Ctrl+L】
定位到当前编辑器的某一行，对非Java文件也有效。</li>
<li>【Alt+←】、【Alt+→】
定位历史记录操作定位</li>
<li>【F3】
快速定位光标位置的某个类、方法和属性。</li>
<li>【F4】
显示类的继承关系，并打开类继承视图。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java标识符]]></title>
    <link href="http://zxdy.github.com/blog/2012/07/23/identifier/"/>
    <updated>2012-07-23T21:35:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/07/23/identifier</id>
    <content type="html"><![CDATA[<ul>
<li>在程序中自定义的一些名字</li>
<li>由26个英文字母大小写，数字：0~9， 符号：_$组成</li>
<li>定义合法标识符规则：

<ul>
<li>1、数字不可以开头</li>
<li>2、不可以使用关键字</li>
</ul>
</li>
<li>Java中严格区分大小写</li>
<li>起名字时，为了提高阅读性，要尽量有意义</li>
</ul>


<h2>Java中的名词规范</h2>

<ul>
<li>包名：多个单词组成时所有字母都小写

<ul>
<li><code>xxxyyyzzz</code></li>
</ul>
</li>
<li>类名接口名：多单词组成时，所有单词的首字母大写

<ul>
<li><code>XxxYyyZzz</code></li>
</ul>
</li>
<li>常量名：所有字母都大写。多单词时每个单词用下划线连接

<ul>
<li><code>XXX_YYY_ZZZ</code></li>
</ul>
</li>
<li>变量名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写

<ul>
<li><code>xxxYyyZzz</code></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grep 简单说明]]></title>
    <link href="http://zxdy.github.com/blog/2012/07/17/grep/"/>
    <updated>2012-07-17T22:51:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/07/17/grep</id>
    <content type="html"><![CDATA[<ul>
<li>需要匹配的字符串最好要习惯加上单引号，否则用<code>.</code>或<code>\&lt;</code>等时会无法匹配到</li>
<li>大小写敏感</li>
</ul>


<h2>^</h2>

<p>锚定行的开始</p>

<p><img src="http://zxdy.github.com/images/grep/^.png" title="^" alt="alt text" /></p>

<h2>$</h2>

<p>锚定行的结束</p>

<p><img src="http://zxdy.github.com/images/grep/$.png" title="$" alt="alt text" /></p>

<p><em>以特殊字符为行开始和结束的匹配该怎么写？</em></p>

<h2>.</h2>

<p>匹配一个非换行符的字符</p>

<!-- more -->


<p><img src="http://zxdy.github.com/images/grep/%E7%82%B9%E5%8F%B7.png" alt="alt text" /></p>

<h2>*</h2>

<p>匹配零个或者多个先前字符</p>

<p><img src="http://zxdy.github.com/images/grep/%E6%98%9F%E5%8F%B7.png" alt="alt text" /></p>

<p><code>c*um</code> 既匹配了<code>cum</code>又匹配了<code>um</code>，得到如上结果</p>

<p><em><code>.*</code> 可以匹配任意字符</em></p>

<h2>[]</h2>

<p>匹配制定范围内的字符</p>

<p><img src="http://zxdy.github.com/images/grep/5.png" title="[]" alt="alt text" /></p>

<h2>\&lt;</h2>

<p>锚定单词的开始</p>

<p><img src="http://zxdy.github.com/images/grep/dancikaishi.png" alt="alt text" /></p>

<h2>\b</h2>

<p>单词锁定符</p>

<p><img src="http://zxdy.github.com/images/grep/suoding.png" alt="alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新博客]]></title>
    <link href="http://zxdy.github.com/blog/2012/07/15/newblog/"/>
    <updated>2012-07-15T01:05:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/07/15/newblog</id>
    <content type="html"><![CDATA[<p>前些天偶然接触到了git，然后又很偶然的接触到了Octopress，折腾了两天总算把新的blog建起来了。我确实很是能折腾新东西。虽然直到现在对中间<a href="http://rogerdudler.github.com/git-guide/index.zh.html">git</a>，ruby，python等等乱七八糟用到过的东西还是p都不懂。再次要感谢谷歌，感谢度娘。</p>

<p>相比而言，确实比wordpress难搞一点，擦把汗。
两个晚上加一个白天，现在大致能够使用了。</p>

<p>总的来说，这是一个静态的blog。因为blog本身是静态的，又按我以前的德性懒得更新也是常有的事。so，姑且看看好了。</p>

<p><em>列一下建站过程中的一些问题，以备将来抽风不时之需</em></p>

<ul>
<li>github</li>
<li>域名指向</li>
<li>repo</li>
<li>本地（win7）搭建环境<code>git</code>, <code>rails</code> &#8211;吐下槽，linux搭环境肯定快多了</li>
<li>octopress安装</li>
<li>目录结构啊混蛋，到现在还没弄清楚</li>
<li>disqus</li>
<li>new_post, new_page</li>
<li>编码，中文（标题）支持</li>
<li>标签云，分类   &#8211;这个花了很久才解决，网上的资料还是不够傻瓜化啊</li>
<li>codeblock &#8211;这个自带插件显示挺漂亮</li>
<li>sublime text2 &#8211;神器不解释</li>
<li>markdown， 配合<a href="http://dillinger.io/">dillinger</a></li>
<li>还要解决一个分享的问题。web2.0时代嘛</li>
</ul>


<h2>以上，就酱</h2>

<p>还是蛮有成就感</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类，成员变量，方法定义格式]]></title>
    <link href="http://zxdy.github.com/blog/2012/07/14/defineofjava/"/>
    <updated>2012-07-14T22:24:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/07/14/defineofjava</id>
    <content type="html"><![CDATA[<h2>类的定义</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[修饰符] class &lt;类名> [extends &lt;父类名>] [implements &lt;接口名>]
</span><span class='line'>{
</span><span class='line'>   &lt;类的成员变量说明>
</span><span class='line'>   &lt;类的方法定义>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>成员变量定义</h2>

<ul>
<li>简单成员变量</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[修饰词] &lt;变量类型> &lt;变量名> = [初值]</span></code></pre></td></tr></table></div></figure>


<ul>
<li>对象成员变量</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[修饰符] &lt;类名> &lt;对象名> = new &lt;类名>(实参表)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最终变量</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[修饰符] &lt;类型> &lt;变量名> = [初值]</span></code></pre></td></tr></table></div></figure>


<h2>方法的定义</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[修饰符] &lt;类型> &lt;方法名> (参数表) [throws &lt;异常类名列表>]
</span><span class='line'>{
</span><span class='line'>   &lt;方法体>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012.7.12]]></title>
    <link href="http://zxdy.github.com/blog/2012/07/14/2012-dot-7-12/"/>
    <updated>2012-07-14T22:17:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/07/14/2012-dot-7-12</id>
    <content type="html"><![CDATA[<h3>killall 参数</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kill pid 删除指定pid的进程
</span><span class='line'>kill -l 查看所有可供传送的信号
</span><span class='line'>kill -9 pid 强制删除进程,传送的是SIGKILL信号
</span><span class='line'>kill -15 pid 强制删除进程,传送的是SIGTERM信号
</span><span class='line'>kill -HUP pid 重启Deamon进程</span></code></pre></td></tr></table></div></figure>


<p><code>-v</code> 报告信号是否成功发送；</p>

<h3>cp 复制命令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp -r 复制目录，如果目标目录不存在时新建
</span><span class='line'>cp -p 此时cp除复制源文件的内容外，还将把其修改时间和访问权限也复制到新文件中
</span><span class='line'>cp -f  相同文件强制覆盖
</span><span class='line'>cp -i  与-f相反，覆盖前提示
</span><span class='line'>cp /test/file1 /test2/file2 把test下的file1复制到test2下，并改名为file2
</span><span class='line'>cp -a /dir1 /dir2 把dir1及其内部文件、文件夹复制到dir2
</span><span class='line'>cp -ax /dir1 /dir2 把dir1及其内部文件、文件夹复制到dir2，并更改文件系统格式，如fat32变为ext3 </span></code></pre></td></tr></table></div></figure>


<h3>mkdir</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -m 777 filename           #设置目录权限
</span><span class='line'>mkdir -p /test1/test2/test3     #直接建立递归目录，即可以在test1,test2不存在的情况下，一次性把从test1到test3的目录生成</span></code></pre></td></tr></table></div></figure>


<h3>find</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find /etc -name passwd -print 在/etc下查找passwd文件，并输出屏幕上
</span><span class='line'>find / -name core -print -exec rm -rf {} \;查找到结果后，把找到的文件全部删除，{}表示找到文件
</span><span class='line'>*******参数说明*******
</span><span class='line'>-name 文件名称
</span><span class='line'>-print 在屏幕输出
</span><span class='line'>-amin 分钟(a表示access)
</span><span class='line'>-atime 24小时数(a表示access)
</span><span class='line'>-cmin 分钟 (c表示changes)
</span><span class='line'>-ctime 24小时数 (c表示changes)
</span><span class='line'>-user 所有者名称
</span><span class='line'>-exec 找到结果后，接着执行指定程序，须以\;结尾
</span><span class='line'>-perm 指定权限，如-perm 600
</span><span class='line'>-size 查找特定大小文件，如-size +1024c表示大于1024字节的文件，单位：b块、c字节、k千字节、w两字节</span></code></pre></td></tr></table></div></figure>


<h3>awk 学习笔记</h3>

<p>参见 <a href="http://man.lupaworld.com/content/manage/ringkee/awk.htm#id2875104">这里</a></p>

<h3>sed 学习笔记</h3>

<p>参见 <a href="http://www.tsnc.edu.cn/tsnc_wgrj/doc/sed.htm">这里</a></p>

<h3>grep 学习笔记</h3>

<p>参见 <a href="http://zxdy.github.com/blog/2012/07/17/grep/">这里</a> AND <a href="http://man.chinaunix.net/newsoft/grep/open.htm">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012.7.11]]></title>
    <link href="http://zxdy.github.com/blog/2012/07/14/2012-dot-7-11/"/>
    <updated>2012-07-14T22:01:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/07/14/2012-dot-7-11</id>
    <content type="html"><![CDATA[<p>page,request,session,application</p>

<p>$0,$1,$?</p>

<p>eclipse debug</p>

<p>sublime text2</p>

<p>[],[[]]</p>

<p>clearcase</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012.7.3]]></title>
    <link href="http://zxdy.github.com/blog/2012/07/14/2012-dot-7-3/"/>
    <updated>2012-07-14T21:48:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/07/14/2012-dot-7-3</id>
    <content type="html"><![CDATA[<h3><em>export: 注意参数名大小写敏感</em></h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export UserName=zxdy
</span><span class='line'>echo $UserName</span></code></pre></td></tr></table></div></figure>


<h3><em>setenv: 用于csh环境,代替export。export用于bsh和ksh环境</em></h3>

<figure class='code'><figcaption><span>export VS setenv </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export key=value
</span><span class='line'>setenv key value</span></code></pre></td></tr></table></div></figure>


<h3><em>case: bashshell 中用于控制程序分支</em></h3>

<figure class='code'><figcaption><span>case in bsh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>case "$variable" in
</span><span class='line'>"$condition1") command...;;
</span><span class='line'>"$condition2") command...;;
</span><span class='line'>esac</span></code></pre></td></tr></table></div></figure>


<h3><em>getopts OPTARG 具体使用请看<a href="http://study.chyangwa.com/IT/AIX/aixcmds2/getopts.htm">这里</a></em></h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getopts 选项字符串 名称 [ 参数 ...]</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3><em>shift: 用来向左移动位置参数</em></h3>

<ul>
<li>Shell的名字 $0</li>
<li>第一个参数 $1</li>
<li>第二个参数 $2</li>
<li>第n个参数 $n</li>
<li>所有参数 $@ 或 $*</li>
<li>参数个数 $#</li>
<li>shift默认是shift 1</li>
</ul>


<p>以下边为例</p>

<figure class='code'><figcaption><span>shift </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>----------------------------输出文字-开始----------------------------
</span><span class='line'>!/bin/bash
</span><span class='line'>until [ -z "$1" ]  # Until all parameters used up
</span><span class='line'>do
</span><span class='line'>  echo "$@ "
</span><span class='line'>  shift
</span><span class='line'>done
</span><span class='line'>#----------------------------输出文字-结束----------------------------
</span><span class='line'>sh shift.sh 1 2 3 4 5 6 7 8 9
</span><span class='line'>#----------------------------输出文字-开始----------------------------
</span><span class='line'>1 2 3 4 5 6 7 8 9
</span><span class='line'>2 3 4 5 6 7 8 9
</span><span class='line'>3 4 5 6 7 8 9
</span><span class='line'>4 5 6 7 8 9
</span><span class='line'>5 6 7 8 9
</span><span class='line'>6 7 8 9
</span><span class='line'>7 8 9
</span><span class='line'>8 9
</span><span class='line'>9
</span><span class='line'>#----------------------------输出文字-结束----------------------------</span></code></pre></td></tr></table></div></figure>


<h3><em>spool: 在sqlplus中用来保存或打印查询结果</em></h3>

<h3><em>Union, Union all</em></h3>

<p>用于合并两个或多个 SELECT 语句的结果集。注意</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.内部的 SELECT 语句必须拥有相同数量的列
</span><span class='line'>2.列也必须拥有相似的数据类型
</span><span class='line'>3.每条 SELECT 语句中的列的顺序必须相同。</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Union和 Union all几乎是等效的，但是UNION ALL命令会列出所有的值，而UNION命令只会选取不同的值列出</p></blockquote>

<h3><em>2>&amp;1</em></h3>

<p>在shell中，每个进程都和三个系统文件相关联：标准输入stdin，标准输出stdout和标准错误stderr，三个系统文件的文件描述符分别为0，1和2。所以这里2>&amp;1的意思就是将标准错误也输出到标准输出当中。</p>

<h3><em>sqlplus</em></h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SQLplus $dbuser/$dbpass@dbserver @$sqlfile $logfile 1＞/dev/null 2＞＆1</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试]]></title>
    <link href="http://zxdy.github.com/blog/2012/07/14/chinesetest/"/>
    <updated>2012-07-14T10:04:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/07/14/chinesetest</id>
    <content type="html"><![CDATA[<h2>中文编码测试</h2>

<p>中文标题乱码解决办法</p>

<p>编辑:</p>

<p><code>\Ruby1.9.3\lib\ruby\gems\1.9.1\gems\jekyll-0.11.2\lib\jekyll\convertible.rb</code></p>

<p>把：</p>

<blockquote><p>self.content = File.read(File.join(base, name))</p></blockquote>

<p>改成:</p>

<blockquote><p>self.content = File.read(File.join(base, name),:encoding => &#8220;utf-8&#8221;)</p></blockquote>

<h2>CodeBlock Test</h2>

<figure class='code'><figcaption><span>zxdy&#8217;s box </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Codeblock</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>code box without title
</span><span class='line'>aa
</span><span class='line'>22
</span><span class='line'>中文</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>markdwon</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://zxdy.github.com/blog/2012/07/13/post-title/"/>
    <updated>2012-07-13T18:42:00+08:00</updated>
    <id>http://zxdy.github.com/blog/2012/07/13/post-title</id>
    <content type="html"><![CDATA[<h1>This is the first article of zxdy</h1>

<p><em>欢迎来到这里</em></p>
]]></content>
  </entry>
  
</feed>
